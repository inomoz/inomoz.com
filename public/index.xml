<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inomoz</title>
    <link>https://inomoz.com/</link>
    <description>Recent content on Inomoz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Feb 2022 16:16:35 +0300</lastBuildDate><atom:link href="https://inomoz.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vim-super-base</title>
      <link>https://inomoz.com/posts/20220106021112-vim_super_base/</link>
      <pubDate>Sun, 13 Feb 2022 16:16:35 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/20220106021112-vim_super_base/</guid>
      <description>&lt;p&gt;Replace multiple spaces with one
:%s/\(^ *\)\@&amp;lt;! \{2,}/ /g&lt;/p&gt;
&lt;p&gt;This says &amp;ldquo;find 2 or more spaces (&#39; \{2,}&#39;) that are NOT preceded by &amp;lsquo;the start of the line followed by zero or more spaces&amp;rsquo;&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hjkl - cursor navigation&lt;/li&gt;
&lt;li&gt;^ - home (0 - ignoring spaces)&lt;/li&gt;
&lt;li&gt;$ - end&lt;/li&gt;
&lt;li&gt;C-b - page up&lt;/li&gt;
&lt;li&gt;C-f - page down&lt;/li&gt;
&lt;li&gt;C-u - back up 1/2 screen&lt;/li&gt;
&lt;li&gt;C-d - page down 1/2 screen&lt;/li&gt;
&lt;li&gt;w - to word right&lt;/li&gt;
&lt;li&gt;b - to word left&lt;/li&gt;
&lt;li&gt;gg - document home&lt;/li&gt;
&lt;li&gt;G - document end&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;selection&#34;&gt;Selection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;v [motion] - select something, you can use any motion which listed above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;copy&#34;&gt;Copy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;y [motion] - select something, you can use any motion which listed above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;delete&#34;&gt;Delete&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;d [motion] - select something, you can use any motion which listed above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;change&#34;&gt;Change&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;c [motion] - select something, you can use any motion which listed above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-combinations&#34;&gt;Basic combinations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C-g - Quit popup/dialog or cancel operation&lt;/li&gt;
&lt;li&gt;J - join lines&lt;/li&gt;
&lt;li&gt;p - paste&lt;/li&gt;
&lt;li&gt;ggVG - Select All&lt;/li&gt;
&lt;li&gt;o - insert on next line&lt;/li&gt;
&lt;li&gt;O - insert on previous line&lt;/li&gt;
&lt;li&gt;yyP - duplicate line&lt;/li&gt;
&lt;li&gt;C-space - autocomplete&lt;/li&gt;
&lt;li&gt;m[?] - toggle mark&lt;/li&gt;
&lt;li&gt;&amp;lsquo;[?] - jump mark&lt;/li&gt;
&lt;li&gt;[motion]&#39;[?] actions on marks, ` - switch direction&lt;/li&gt;
&lt;li&gt;gcc - comment line&lt;/li&gt;
&lt;li&gt;C-x 0 - Delete Window&lt;/li&gt;
&lt;li&gt;SPC b k - kill buffer (^w alternative)&lt;/li&gt;
&lt;li&gt;SPC b K - kill all buffer (^+w alternative)&lt;/li&gt;
&lt;li&gt;%s/foo/bar/g - replacement&lt;/li&gt;
&lt;li&gt;gU[U] - change line to UPPER&lt;/li&gt;
&lt;li&gt;C-c C-c - run&amp;hellip;&lt;/li&gt;
&lt;li&gt;/ - search, use \C escape charater for case sensitive search&lt;/li&gt;
&lt;li&gt;n N - next / previous search item&lt;/li&gt;
&lt;li&gt;SPC s p - search in project&lt;/li&gt;
&lt;li&gt;C-+ C&amp;ndash; - Zoom plus Zoom minus&lt;/li&gt;
&lt;li&gt;SPC . [filename] - search or create new file&lt;/li&gt;
&lt;li&gt;SPC SPC - find file&lt;/li&gt;
&lt;li&gt;SPC f r - recent files&lt;/li&gt;
&lt;li&gt;% - matching brace&lt;/li&gt;
&lt;li&gt;C-o C-i - previous / next jump list&lt;/li&gt;
&lt;li&gt;SPC Tab [num] - go to #N tab&lt;/li&gt;
&lt;li&gt;gt gT - next/previous tab&lt;/li&gt;
&lt;li&gt;C-w C-w - Focus on Another Split&lt;/li&gt;
&lt;li&gt;workspace/swap-left[right] Move Tab Forward/Backward&lt;/li&gt;
&lt;li&gt;ddp / ddkP line one down / up.&lt;/li&gt;
&lt;li&gt;C-e Export buffer (org)&lt;/li&gt;
&lt;li&gt;C-R - Redo&lt;/li&gt;
&lt;li&gt;SPC-s-k C-c z Inline documentation&lt;/li&gt;
&lt;li&gt;C-M-o Split lines&lt;/li&gt;
&lt;li&gt;za - toggle fold&lt;/li&gt;
&lt;li&gt;zo zc - Fold/Unfold&lt;/li&gt;
&lt;li&gt;zO zC - open all nested folds&lt;/li&gt;
&lt;li&gt;C-s Save file&lt;/li&gt;
&lt;li&gt;SPC f S Save as&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>movies</title>
      <link>https://inomoz.com/posts/20220108140506-movies/</link>
      <pubDate>Sun, 13 Feb 2022 11:13:36 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/20220108140506-movies/</guid>
      <description>&lt;p&gt;We Bare Bears
Doctor Stone&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript: The definitive guide</title>
      <link>https://inomoz.com/posts/flanaganjavascriptdefinitiveguide2020/</link>
      <pubDate>Sat, 12 Feb 2022 21:31:10 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/flanaganjavascriptdefinitiveguide2020/</guid>
      <description>&lt;h2 id=&#34;flanaganJavaScriptDefinitiveGuide2020&#34;&gt;Notes&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Escape Sequences</title>
      <link>https://inomoz.com/posts/20220119215704-escape_sequences/</link>
      <pubDate>Sat, 12 Feb 2022 18:28:56 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/20220119215704-escape_sequences/</guid>
      <description>&lt;p&gt;Combination of characters, which meaning something other than the literal characters contained therein.&lt;/p&gt;
&lt;p&gt;Usually 2 characters, one is preceding and second is actual character (which explain that escape sequence).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Escape_sequences_in_C#ref_Note1&#34;&gt;https://en.wikipedia.org/wiki/Escape_sequences_in_C#ref_Note1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;\a 07	Alert (Beep, Bell) (added in C89)[1]
\b 08	Backspace
\e 1B	Escape character (non standart)
\f 0C	Formfeed Page Break
\n 0A	Newline (Line Feed); see notes below
\r 0D	Carriage Return
\t 09	Horizontal Tab
\v 0B	Vertical Tab
\\	5C	Backslash
\&#39;	27	Apostrophe or single quotation mark
\&amp;quot;	22	Double quotation mark
\?	3F	Question mark (used to avoid trigraphs)
\nnnnote 2	any	The byte whose numerical value is given by nnn interpreted as an octal number
\xhh…	any	The byte whose numerical value is given by hh… interpreted as a hexadecimal number
\uhhhhnote 3	none	Unicode code point below 10000 hexadecimal (added in C99)[1]: 26
\Uhhhhhhhhnote 4	none	Unicode code point where h is a hexadecimal digit&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/hectoregm/1368066&#34;&gt;https://gist.github.com/hectoregm/1368066&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Escape Sequence	Name	Meaning
\a Alert	        Produces an audible or visible alert.
\b Backspace	Moves the cursor back one position (non-destructive).
\f Form Feed	Moves the cursor to the first position of the next page.
\n New Line	Moves the cursor to the first position of the next line.
\r Carriage Return	Moves the cursor to the first position of the current line.
\t Horizontal Tab	Moves the cursor to the next horizontal tabular position.
\v Vertical Tab	Moves the cursor to the next vertical tabular position.
\&#39;		        Produces a single quote.
\&amp;quot;		        Produces a double quote.
\?		        Produces a question mark.
\\		        Produces a single backslash.
\0		        Produces a null character.
\ddd          Defines one character by the octal digits (base-8 number). Multiple characters may be defined in the same escape sequence, but the value is implementation-specific (see examples).
\xdd          Defines one character by the hexadecimal digit (base-16 number).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My education roadmap</title>
      <link>https://inomoz.com/posts/20220126023314-edu/</link>
      <pubDate>Sat, 12 Feb 2022 18:09:51 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/20220126023314-edu/</guid>
      <description>&lt;h2 id=&#34;stage-1&#34;&gt;Stage 1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://puzzle-english.com/&#34;&gt;Puzzle English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/ritchieprogramminglanguage1990/&#34;&gt;The C programming language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/petzoldkodtaynyyyazyk101/&#34;&gt;Код: тайный язык информатики&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/alexandremelinkratchayshiykursshkolnoy/&#34;&gt;Кратчайший Курс Школьной Математики&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/20220203004140-leetcode_examples/&#34;&gt;LeetCode examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/feldroytwoscoopsdjango101/&#34;&gt;Two scoops of Django 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hyperskill.org/tracks&#34;&gt;JetBrains Academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/slatkineffectivepython902019/&#34;&gt;Effective python: 90 specific ways to write better python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/bhargavagrokkingalgorithms101/&#34;&gt;Grokking Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/huntpragmaticprogrammerjourneyman1999/&#34;&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/martinchistyykod101/&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship RU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/flanaganjavascriptdefinitiveguide2020/&#34;&gt;JavaScript: The definitive guide, 7th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/djirdehfullstackvuejs2021/&#34;&gt;Full Stack Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inomoz.com/posts/davidsvetosveshchenie2001/&#34;&gt;Свет и освещение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Grokking Algorithms</title>
      <link>https://inomoz.com/posts/bhargavagrokkingalgorithms101/</link>
      <pubDate>Sat, 12 Feb 2022 17:41:32 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/bhargavagrokkingalgorithms101/</guid>
      <description>&lt;h2 id=&#34;bhargavaGrokkingAlgorithms101&#34;&gt;Grokking Algorithms v2&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Doom Emacs Workflow</title>
      <link>https://inomoz.com/posts/20220212192410-doom_emacs_workflow/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/20220212192410-doom_emacs_workflow/</guid>
      <description>&lt;h2 id=&#34;command-abbreviations&#34;&gt;Command Abbreviations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; - &amp;ldquo;Control&amp;rdquo; key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt; - &amp;ldquo;M&amp;rdquo; or &amp;ldquo;option/alt&amp;rdquo; key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; - &amp;ldquo;Command&amp;rdquo; key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC&lt;/code&gt; - &amp;ldquo;Space&amp;rdquo; key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;general--tested&#34;&gt;General (tested)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-s&lt;/code&gt; for saving the current file (customized command).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x&lt;/code&gt; for entering a command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC q q&lt;/code&gt; to Quit Emacs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC f D&lt;/code&gt; to delete this file&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;projects-with-projectile--tested&#34;&gt;Projects with Projectile (tested)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC p p&lt;/code&gt; to open a project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC SPC&lt;/code&gt; to open a file in a project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC o p&lt;/code&gt; to open the file explorer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC o T&lt;/code&gt; to open the vterm in fullscreen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC o t&lt;/code&gt; to open the vterm in a popup window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC f r&lt;/code&gt; recently visited files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC f R&lt;/code&gt; recently visited files in a project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x projectile-discover-projects-in-directory&lt;/code&gt; to find projects
within given folder using Projectile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x projectile-discover-projects-in-search-path&lt;/code&gt; to find projects in
the folder defined by the &lt;code&gt;projectile-project-search-path&lt;/code&gt; variable
using Projectile&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dired&#34;&gt;Dired&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dired (Directory Editor) is how you interfaces with a directory&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;C-x d&lt;/code&gt; to open dired.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;RET&lt;/code&gt; to go to a folder or open a file.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;-&lt;/code&gt; for going one folder back&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;+&lt;/code&gt; for creating a new directory&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;d&lt;/code&gt; to mark the files for deletion, press &lt;code&gt;x&lt;/code&gt; to delete.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;M&lt;/code&gt; to change permissions&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;o&lt;/code&gt; to sort by modes.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;O&lt;/code&gt; to change the owner.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;m&lt;/code&gt; to mark and &lt;code&gt;u&lt;/code&gt; to unmark files or directories.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt; to unselect all&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;t&lt;/code&gt; to invert the selection.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; to switch between files and directories&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;C&lt;/code&gt; to copy.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;R&lt;/code&gt; to move.&lt;/li&gt;
&lt;li&gt;Move with &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Toggle &lt;code&gt;(&lt;/code&gt; for simple view&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC .&lt;/code&gt; to create or find a file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; to invoke mark dialog&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* \&lt;/code&gt; to select all directories.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; copy to another window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; move to another window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dired-do-what-i-mean-target&lt;/code&gt; set to true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; to edit file/dir name&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;buffers-windows-and-basic-navigation&#34;&gt;Buffers, Windows and Basic Navigation&lt;/h2&gt;
&lt;h3 id=&#34;buffers&#34;&gt;Buffers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Buffers are a special concept in emacs they can be terminals, files,
directories, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC ,&lt;/code&gt; to open another buffer
&lt;ul&gt;
&lt;li&gt;workspace buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC SHIFT ,&lt;/code&gt; to switch to all buffers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC b X&lt;/code&gt; You can create a scratch buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC b s&lt;/code&gt; to save and name it&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL w v&lt;/code&gt; window split vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL w s&lt;/code&gt; window split horizonal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL w w&lt;/code&gt; to switch windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC w q&lt;/code&gt; to kill windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC w &amp;gt;&lt;/code&gt; and &lt;code&gt;SPC w &amp;lt;&lt;/code&gt; to increase and decrease window width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC w +&lt;/code&gt; and &lt;code&gt;SPC w -&lt;/code&gt; to increase and decrease window height&lt;/li&gt;
&lt;li&gt;You can use vim motion keys to navigate between open windows for example &lt;code&gt;SPC w H&lt;/code&gt; moves the window to the left.&lt;/li&gt;
&lt;li&gt;Windows are panes in your screen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;workspaces&#34;&gt;Workspaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC TAB n&lt;/code&gt; New workspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC TAB N&lt;/code&gt; Newly named workspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC TAB [&lt;/code&gt; Previous workspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC TAB ]&lt;/code&gt; Next workspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC TAB d&lt;/code&gt; Remove workspace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC TAB R&lt;/code&gt; Restore last session&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-1&lt;/code&gt; Switch to workspace 1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-2&lt;/code&gt; Switch to workspace 2 and so forth.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installing-packages-using-org-super-agenda-as-an-example&#34;&gt;Installing Packages using org-super-agenda as an example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC f p&lt;/code&gt; to open the config.&lt;/li&gt;
&lt;li&gt;To add a package, add the package to &lt;code&gt;.doom.d/package.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then close and &lt;code&gt;doom refresh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then go to &lt;code&gt;.doom.d/config.el&lt;/code&gt; to configure the package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def-package!&lt;/code&gt; is a macro you can use to configure packages
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;space h help&lt;/code&gt; you can look up method man pages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:init&lt;/code&gt; is used for setting the package up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:config&lt;/code&gt; to set configuration after the package has been
initialized&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:after&lt;/code&gt; lets you set which package it should load after&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;:after!&lt;/code&gt; to configure packages that are already there&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;quick-horizontal-movements-with-evil-snipe&#34;&gt;Quick, horizontal movements with evil-snipe&lt;/h2&gt;
&lt;h3 id=&#34;inine-navigation&#34;&gt;Inine navigation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; and then the letter you want to navigate to.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; will go backward&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt; will go forward after that &amp;ldquo;find&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; to find and move cursor to the charachter before what you&amp;rsquo;ve searched.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; puts you in vi mode. You can select text by with &lt;code&gt;v t some-char-you-navigate-to&lt;/code&gt; or &lt;code&gt;v f some-char-you-navigate-to&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt; to jump to the next find&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; to jump to the previous one&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; to snipe&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;long-distance-navigation-inside-the-file&#34;&gt;Long distance navigation inside the file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Evil-snipe lets you go to all the occuranses in your document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g s SPC&lt;/code&gt; to use avy and going to a certain word in file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; is the same thing except for a character you want to jump to before the one you insert&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; to do a double character search&lt;/li&gt;
&lt;li&gt;Evil-snipe will remember your last search so &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt; will navigate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt; to go backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g s SPC&lt;/code&gt; and then select the letter that avy gives you to navigate to that spot
&lt;ul&gt;
&lt;li&gt;These letters are on your home row so they are easy to click&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC h v&lt;/code&gt; for variable, to set the avy variable to search all open
windows
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avy-all-windows&lt;/code&gt; lets you search in all windows open.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can remove a word with
&lt;code&gt;g s SPC select-one-letter x select-the-removal-spot&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;X&lt;/code&gt; to stay in your original spot of search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can go &lt;code&gt;g s space select-one-letter i select-the-correction-spot&lt;/code&gt;
to correct the spelling of the search
&lt;ul&gt;
&lt;li&gt;Install ispell on your OS first&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can &lt;code&gt;yank&lt;/code&gt; a word from one place to another with
&lt;code&gt;g s SPC select-one-letter y select-the-correction-spot-to-paste&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;t&lt;/code&gt; to &amp;ldquo;teleport&amp;rdquo; the word from one place to another
&lt;code&gt;g s SPC select-one-letter t select-the-correction-spot-to-teleport&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;multiple-cursor-in-emacs-with-evil-multiedit&#34;&gt;Multiple cursor in Emacs with Evil-multiedit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make selections and then edit those selections interactively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M d&lt;/code&gt; will select the current word, and again will find another
occurance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M D&lt;/code&gt; will find the occurence upward&lt;/li&gt;
&lt;li&gt;You can use a visual selection to select multiple words.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; will select all occurances&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL n&lt;/code&gt; for next selection &lt;code&gt;CTRL p&lt;/code&gt; for previous&lt;/li&gt;
&lt;li&gt;Exclude matches with &lt;code&gt;RET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can make an edit and the changes will be reflected in all the
selection&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;org-mode&#34;&gt;Org Mode&lt;/h2&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Org mode gives you structure to your document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; for a h1 &lt;code&gt;**&lt;/code&gt; for an h2 and so on&lt;/li&gt;
&lt;li&gt;You can &lt;code&gt;TAB&lt;/code&gt; a section to fold a subtree (hide it)&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;SHIFT TAB&lt;/code&gt; to cycle through folded states&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL return&lt;/code&gt; to create a headline of the same type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M arrow up&lt;/code&gt; lets you shift the position of the section&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M h&lt;/code&gt; promotes a headline to the next level&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M l&lt;/code&gt; demotes&lt;/li&gt;
&lt;li&gt;You can create lists
&lt;ol&gt;
&lt;li&gt;onw&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;wooo&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;links-hyperlinks-and-more&#34;&gt;Links, Hyperlinks and more&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC m l&lt;/code&gt; to add a link to an org page&lt;/li&gt;
&lt;li&gt;You can add &lt;code&gt;::&lt;/code&gt; to specify a heading or a line number&lt;/li&gt;
&lt;li&gt;You can paste http links as well&lt;/li&gt;
&lt;li&gt;You can &amp;ldquo;link&amp;rdquo; some text with specific code &lt;code&gt;SPC m l&lt;/code&gt; elisp: &lt;a href=&#34;(+%202%202)&#34;&gt;(+ 2 2)&lt;/a&gt; when you click the link, emacs will evaluate the expression&lt;/li&gt;
&lt;li&gt;Show &lt;a href=&#34;org-agenda&#34;&gt;My Agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;ls&#34;&gt;List Files&lt;/a&gt; in directory&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;defining-custoom-link-types&#34;&gt;Defining custoom Link Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtube.com/watch?v=Febe4lUK5G4&#34;&gt;Whatch the video about custom links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linking-to-words-and-bookmarks&#34;&gt;Linking to words &amp;amp; Bookmarks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC n l&lt;/code&gt; stores a link to a particular headline&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;code-snippets-and-babel&#34;&gt;Code Snippets &amp;amp; Babel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC i s&lt;/code&gt; for inserting code snippets
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt; to execute the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC m &#39;&lt;/code&gt; to edit inside the babel in another buffer.&lt;/li&gt;
&lt;li&gt;Results will show up in a &lt;code&gt;##+RESULTS&lt;/code&gt; header&lt;/li&gt;
&lt;li&gt;This feature is called Babel&lt;/li&gt;
&lt;li&gt;One snippet can consume the output of another snippet&lt;/li&gt;
&lt;li&gt;You can create your own snippets in the following directory: &lt;code&gt;~/.doom.d/snippets/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;task-management&#34;&gt;Task Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a task by prefixing any heading with &lt;code&gt;TODO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DONE&lt;/code&gt; means the task is done&lt;/li&gt;
&lt;li&gt;You can create your custom key words by changing this variable: &lt;code&gt;org-todo-keywords&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remember you can get to your variables through &lt;code&gt;SPC h v&lt;/code&gt; (M-x counsel-describe-variable)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These values are already set in Doom:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;((sequence &amp;#34;TODO(t)&amp;#34; &amp;#34;PROJ(p)&amp;#34; &amp;#34;STRT(s)&amp;#34; &amp;#34;WAIT(w)&amp;#34; &amp;#34;HOLD(h)&amp;#34; &amp;#34;|&amp;#34; &amp;#34;DONE(d)&amp;#34; &amp;#34;KILL(k)&amp;#34;)
(sequence &amp;#34;[ ](T)&amp;#34; &amp;#34;[-](S)&amp;#34; &amp;#34;[?](W)&amp;#34; &amp;#34;|&amp;#34; &amp;#34;[X](D)&amp;#34;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC m t&lt;/code&gt; to change a status of a todo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHIFT left&lt;/code&gt; and &lt;code&gt;SHIFT right&lt;/code&gt; can be used to change the status of a todo as well.&lt;/li&gt;
&lt;li&gt;If you finish a task with a command, org mode will add a date that you &amp;ldquo;closed&amp;rdquo; the task.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC o a t&lt;/code&gt; to open the agenda -&amp;gt; todo list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; to quit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-agenda-files&lt;/code&gt; is a variable you can set to filter which files agenda searches for todos in.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;priorities-for-tasks&#34;&gt;Priorities for Tasks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHIFT up&lt;/code&gt; and &lt;code&gt;SHIFT down&lt;/code&gt; will toggle the priority of tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-fancy-priorities&lt;/code&gt; gives you fancy looking priorities&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;marking-tasks-with-tags&#34;&gt;Marking Tasks with Tags&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tags can be attached to any headlines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC m q&lt;/code&gt; to tag a headline&lt;/li&gt;
&lt;li&gt;Example:
&lt;ul&gt;
&lt;li&gt;TODO play more games :fun:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tags are hierarchical so nested headings will be tagged with the
parent header tag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-tag-sparce-tree&lt;/code&gt; will search for headings that only have a specific
tag&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setting-a-poperty-for-a-task-headline&#34;&gt;Setting a poperty for a task/headline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC m o&lt;/code&gt; is used for setting a property.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Marking Headlines with Categories&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;a href=&#34;https://orgmode.org/manual/Categories.html&#34;&gt;categories&lt;/a&gt; to change the label in agenda view.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Org-Habits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to &lt;a href=&#34;https://orgmode.org/manual/Tracking-your-habits.html&#34;&gt;keep track of your habits&lt;/a&gt; using org mode, you can set the &lt;code&gt;STYLE&lt;/code&gt; property to habit.
&lt;ul&gt;
&lt;li&gt;If you want to set a category (for chani&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Two types of lists, ordered and unordered lists
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHIFT right&lt;/code&gt; and &lt;code&gt;SHIFT left&lt;/code&gt; can be used to change the type of lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can also change an unorded list by changing the first item to 1. and then typing &lt;code&gt;C-c C-c&lt;/code&gt; and vice verca.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;checkboxes&#34;&gt;Checkboxes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; This is still todo&lt;/li&gt;
&lt;li&gt;[-] This is in progress&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; This is a done task&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;you-can-see-how-many-are-done-with-a-cookie&#34;&gt;You can see how many are done with a &amp;ldquo;cookie&amp;rdquo; &lt;code&gt;[1/2]&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[-] Task 1&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Task 2&lt;/li&gt;
&lt;li&gt;You can do this by adding &lt;code&gt;[/]&lt;/code&gt; to the heading and pressing &lt;code&gt;C-c C-c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can&amp;rsquo;t assign a tag or a priority&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;magit&#34;&gt;Magit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Magit is enabled by default in Doom Emacs&amp;rsquo;s init.el&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC g g&lt;/code&gt; shows Magit status page
&lt;ul&gt;
&lt;li&gt;Most commands are done from the status page&lt;/li&gt;
&lt;li&gt;Use tab to expand headlines in the status page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; in Magit&amp;rsquo;s status page for a nice list of available commands and help, &lt;code&gt;q&lt;/code&gt; to close this help page&lt;/li&gt;
&lt;li&gt;Open diff view for a file with &lt;code&gt;TAB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;s&lt;/code&gt; under &amp;ldquo;Unstaged changes&amp;rdquo; to stage a change
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; to undo a change&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; to commit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b s&lt;/code&gt; for branch and spinoff to create another branch, rewinding the
commits you made to master&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b b&lt;/code&gt; to switch branches&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git-commit-flow-in-more-detail&#34;&gt;Git Commit Flow in More Detail&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t t&lt;/code&gt; to create a tag, default place is the commit you are currently
selecting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; to select a change in a diff and &lt;code&gt;x&lt;/code&gt; to discard that change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; to stage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; to commit, you can &lt;code&gt;q&lt;/code&gt; to quit the commit screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; to push and then &lt;code&gt;p&lt;/code&gt; to your remote or &lt;code&gt;u&lt;/code&gt; to a another remote&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;magit-with-forge-for-issuing-pull-requests-emacs&#34;&gt;Magit with Forge for Issuing Pull Requests - Emacs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Forge is installed in emacs doom&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt; for forge&lt;/li&gt;
&lt;li&gt;Set up forge with &lt;code&gt;M x forge-pull&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;the first time you will get a token from github&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ c p&lt;/code&gt; to create a pull request with forge
&lt;ul&gt;
&lt;li&gt;select the base branch&lt;/li&gt;
&lt;li&gt;then select the target branch&lt;/li&gt;
&lt;li&gt;then provide a short description&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL c CTRL c&lt;/code&gt; to finish the pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now there will be a &lt;code&gt;pull requests&lt;/code&gt; tab&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set up vterm in your init.el file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC o T&lt;/code&gt; for opening vterm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC o t&lt;/code&gt; for opening vterm in a popup window&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;file-tree&#34;&gt;File Tree&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set up neotree or treemacs in your init.el file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC o p&lt;/code&gt; for opening neotree or treemacs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-c C-z&lt;/code&gt; to insert a note for a heading in org mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--listend--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt; to insert a tag for a heading in org mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;capturing&#34;&gt;Capturing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC X&lt;/code&gt; to capture (the new thing gets caputured to a single file but that&amp;rsquo;s fine since we can easily refile it.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC m r r&lt;/code&gt; to refile&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;org-roam&#34;&gt;Org Roam&lt;/h2&gt;
&lt;p&gt;These keybinding only work after installing org-roam. To install org roam edit your &lt;code&gt;init.el&lt;/code&gt; file and add &lt;code&gt;(org +roam2)&lt;/code&gt; in its designated place. Watch &lt;a href=&#34;https://www.youtube.com/watch?v=AyhPmypHDEw&#34;&gt;this video&lt;/a&gt; to understand what org-roam is.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC n r f&lt;/code&gt; Find an existing node or create a new one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC n r i&lt;/code&gt; Insert a link to another node.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC n r r&lt;/code&gt; Toggle backlinks pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC m m o t&lt;/code&gt; Add a roam tag.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC m m o a&lt;/code&gt; Add a roam alias.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BRqjaN4-gGQ&amp;amp;list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&amp;amp;index=10&#34;&gt;Link to youtube video series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ianjones.us/zaiste-programming-doom-emacs-tutorial/#org7ad2452&#34;&gt;This org file is mostly from the notes taken from the series above by ianjones.us&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=s0ed8Da3mjE&#34;&gt;Three HUGE Mistakes New Emacs Users Make&lt;/a&gt; (they are included in the tips above)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-to-learn&#34;&gt;What to learn &lt;code&gt;[0/2]&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://orgroam.com&#34;&gt;Org Roam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; abbrev-mode&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>test</title>
      <link>https://inomoz.com/posts/20220212172135-test/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/20220212172135-test/</guid>
      <description>&lt;h2 id=&#34;heading-number-2&#34;&gt;Heading number 2&lt;/h2&gt;
&lt;p&gt;lorem ipsum dolor sit el&lt;/p&gt;
&lt;h3 id=&#34;heading-number-3&#34;&gt;Heading number 3&lt;/h3&gt;
&lt;p&gt;lorem ipsum dolor sit el&lt;/p&gt;
&lt;h4 id=&#34;heading-number-4&#34;&gt;Heading number 4&lt;/h4&gt;
&lt;p&gt;lorem ipsum dolor sit el&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Чистый Код</title>
      <link>https://inomoz.com/posts/martinchistyykod101/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/martinchistyykod101/</guid>
      <description>&lt;h2 id=&#34;martinChistyyKod101&#34;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Честность в мелочах вовсе не честность&lt;/p&gt;
&lt;h3 id=&#34;честность-в-мелочах-вовсе-не-мелочь&#34;&gt;Честность в мелочах вовсе не мелочь&lt;/h3&gt;
&lt;p&gt;Датская поговорка. Альтернативы - бог скрывается в мелочах. Концепция программирования зависящая только от тестов и кода уже устарела. Мелочи важнее чем любые планы. Обращая внимание на мелочи вы приобретаете необходимую практику.&lt;/p&gt;
&lt;h3 id=&#34;сопровождение&#34;&gt;Сопровождение&lt;/h3&gt;
&lt;p&gt;В программировании 80+% того что мы делаем мы называем сопровождением.&lt;/p&gt;
&lt;p&gt;1951 г. - появилась методология TPM (Total Productive maintenance). Ориентирована прежде всего на сопровождение а не на производство. Основаня на приципах 5S.
Ее принципы заложены в методолгии &lt;a href=&#34;https://inomoz.com/posts/20220123190452-lean/&#34;&gt;LEAN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Хорошая практика программирования требует сосредоточенность, присутствие духа и мышление.&lt;/p&gt;
&lt;p&gt;Философия 5S:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Организация (сейри), грамотное именование.&lt;/li&gt;
&lt;li&gt;Аккуратность (сейтон), всему своё место.&lt;/li&gt;
&lt;li&gt;Чистка (сейсо), код не должен быть захламлённым.&lt;/li&gt;
&lt;li&gt;Стандартизация (сэйкэцу), придерживайтесь единого стиля в коде.&lt;/li&gt;
&lt;li&gt;Дисциплина (сюцукэ), нужно следовать правилам, размышлять о работе и быть готовым к изменениям в самом себе.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;описание-принципов&#34;&gt;Описание принципов&lt;/h3&gt;
&lt;p&gt;Следуя этим принципам вы значительно уменьшаете вероятность возникновения ошибок, вы стараетесть переработать уже существующий код под эти принципы, ваш код удобочитаем, спорные части вы переписываете сразу-же.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Чистота ведет к божественности.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;Тот кто верен в мелочах, верен во всем.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;Ранняя пташка червяка ловит.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;Не откладывай на завтра то, что можно сделать сегодня.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;Из маленьких желудей вырастают большие дубы.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;Дорога ложка к обеду.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--quoteend--&gt;
&lt;blockquote&gt;
&lt;p&gt;Яблочко на ужин и доктор не нужен.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;непрерывное-улучшение&#34;&gt;Непрерывное улучшение&lt;/h3&gt;
&lt;p&gt;Каждое действие для проектирования можно рассматривать как атомарное восстановление. Стихотвроение никогда не бывает законченным, оно требует непрерывного улучшения, прекратить работу над ним значит бросить его.&lt;/p&gt;
&lt;p&gt;Невнимательность к мелочам или их игнорирование, зацикливание на внешнем виде в конечном итоге обходится недёшево.&lt;/p&gt;
&lt;h3 id=&#34;зависимость-ошибок-от-стиля-программирования&#34;&gt;Зависимость ошибок от стиля программирования&lt;/h3&gt;
&lt;p&gt;В ходе исследований в BELL labs выяснилось что последовательный стиль применения отступов является одним из самых статистически значимых признаков низкой плотности ошибок.&lt;/p&gt;
&lt;p&gt;Качество кода возникает в результате миллиона проявлений нбезразличного отношения к коду, а не от применения супер методов.&lt;/p&gt;
&lt;h3 id=&#34;рассматривайте-свой-код-dot-dot-dot&#34;&gt;Рассматривайте свой код&amp;hellip;&lt;/h3&gt;
&lt;p&gt;Рассматривайте свой код как красивое воплощение благородных усилий по проектированию - как процесс, а не статистически конечной точки.&lt;/p&gt;
&lt;h3 id=&#34;честность&#34;&gt;Честность&lt;/h3&gt;
&lt;p&gt;Как уже было сказано важно быть честным в мелочах. Нужно делать все возможное для улучшеня вашего кода и стараться делать его лучше чем он был.&lt;/p&gt;
&lt;h3 id=&#34;flashcards&#34;&gt;Flashcards&lt;/h3&gt;
&lt;h4 id=&#34;мелочи-важны&#34;&gt;Мелочи важны&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Обращая внимание на мелочи вы приобретаете, вы приобретаете?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Концепция программирования зависящая только от тестов и кода уже устарела. Мелочи важнее чем любые планы. Обращая внимание на мелочи вы приобретаете необходимую практику.&lt;/p&gt;
&lt;p&gt;Как уже было сказано важно быть честным в мелочах. Нужно делать все возможное для улучшеня вашего кода и стараться делать его лучше чем он был.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5s&#34;&gt;5S&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Назовите основые принципы философии 5S&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Организация (сейри), грамотное именование.&lt;/li&gt;
&lt;li&gt;Аккуратность (сейтон), всему своё место.&lt;/li&gt;
&lt;li&gt;Чистка (сейсо), код не должен быть захламлённым.&lt;/li&gt;
&lt;li&gt;Стандартизация (сэйкэцу), придерживайтесь единого стиля в коде.&lt;/li&gt;
&lt;li&gt;Дисциплина (сюцукэ), нужно следовать правилам, размышлять о работе и быть готовым к изменениям в самом себе.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Следуя этим принципам вы значительно уменьшаете вероятность возникновения ошибок, вы стараетесть переработать уже существующий код под эти принципы, ваш код удобочитаем, спорные части вы переписываете сразу-же.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;зачем&#34;&gt;Зачем&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Почему важно обращать внимание на мелочи в контексте разработки, в чем основная суть?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Невнимательность к мелочам или их игнорирование, зацикливание на внешнем виде в конечном итоге обходится недёшево.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;небезразличие&#34;&gt;Небезразличие&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Есть ли какие либо сверх-универсальные методы для достижения качества кода? Или нужно просто придерживаться небезразличного отношения к коду?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Скорее второе, я думаю есть методы позволяющие улучшить код, но они могут быть не всегда применимы, а если придерживаться второго пункта то качество кода улучшиться.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;идеальный-код&#34;&gt;Идеальный код&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Когда ваш код становится идеальным?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Я думаю никогда.
Рассматривайте свой код как красивое воплощение благородных усилий по проектированию - как процесс, а не статистически конечной точки.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;h3 id=&#34;профессионализм&#34;&gt;Профессионализм&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://inomoz.com/ox-hugo/20220123-212705_screenshot.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Что позволяет избежать поток ужасных ошибок, отладку в панике, напор начальства? Правильный ответ профессионализм.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effective python</title>
      <link>https://inomoz.com/posts/slatkineffectivepython902019/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0300</pubDate>
      
      <guid>https://inomoz.com/posts/slatkineffectivepython902019/</guid>
      <description>&lt;h2 id=&#34;slatkinEffectivePython902019&#34;&gt;Effective python: 90 specific ways to write better python&lt;/h2&gt;
&lt;h3 id=&#34;item-1-know-which-version-of-python-you-re-using&#34;&gt;Item 1: Know which version of python you&amp;rsquo;re using&lt;/h3&gt;
&lt;h4 id=&#34;idioms-of-programming-language-are-defined-by-its-users&#34;&gt;Idioms of programming language are defined by its users&lt;/h4&gt;
&lt;p&gt;This means popular practices, formating rules, conventions, etc are defined by their users!&lt;/p&gt;
&lt;h4 id=&#34;python-version&#34;&gt;Python version&lt;/h4&gt;
&lt;p&gt;You can easily detect which python version you use right now.&lt;/p&gt;
&lt;h3 id=&#34;item-2-follow-the-pep8-style-guide&#34;&gt;Item 2: Follow the PEP8 Style Guide&lt;/h3&gt;
&lt;h4 id=&#34;pep-is&#34;&gt;PEP is&lt;/h4&gt;
&lt;p&gt;Python Enhancement Proposal or PEP 8
It&amp;rsquo;s Python formatting style guide.&lt;/p&gt;
&lt;h4 id=&#34;why-pep&#34;&gt;Why PEP?&lt;/h4&gt;
&lt;p&gt;Using consistent style, make your code much more approachable and readable.&lt;/p&gt;
&lt;h4 id=&#34;whitespace&#34;&gt;Whitespace&lt;/h4&gt;
&lt;p&gt;Since whitespaces are significant in Python, it&amp;rsquo;s recommend to follow this rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use 4 spaces insted tabs for indentation.&lt;/li&gt;
&lt;li&gt;Indent a long lines by additional spaces if they splitted.&lt;/li&gt;
&lt;li&gt;Functions and classes separated by 2 blank lines.&lt;/li&gt;
&lt;li&gt;Class methods separated by 1 blank line.&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;naming&#34;&gt;Naming&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Functions, variables, and attributes in &lt;code&gt;lowercas_underscore&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;Protected instance attributes should be in &lt;code&gt;_leading_underscore&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;Classes (including exceptions) should be in &lt;code&gt;CapitalizedWord&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;Module-level constants should be in &lt;code&gt;ALL_CAPS&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;Instance methods in classes should use &lt;code&gt;self&lt;/code&gt; (ref to object), as the name of the first parameter.&lt;/li&gt;
&lt;li&gt;Class methods should use &lt;code&gt;cls&lt;/code&gt;, which refers to the class, as the name of the first parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;expressions-and-statements&#34;&gt;Expressions and statements&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use inline negation &lt;code&gt;if a is not b&lt;/code&gt; instead negation of positive expression &lt;code&gt;if not a is b&lt;/code&gt;, some like &lt;code&gt;if not CONDTION&lt;/code&gt;. It&amp;rsquo;s really hard to understand.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t check for empty/non-empty by comparing length to zero ([], &amp;lsquo;&#39;), just use &lt;code&gt;if/if not&lt;/code&gt; something and you need assume that empty value will be evaluated to False, non-empty to True.&lt;/li&gt;
&lt;li&gt;Avoid single-line if, for and while loops, except compound statements, spread them over multiple lines for clarity/readability (it&amp;rsquo;s actual for complex items).&lt;/li&gt;
&lt;li&gt;Split long lines with parentheses if they are too long.&lt;/li&gt;
&lt;li&gt;Prefer splitting with parentheses over using \ line conttinuation character.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;imports&#34;&gt;Imports&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Place imports at top.&lt;/li&gt;
&lt;li&gt;Use absolute names when you import modules.&lt;/li&gt;
&lt;li&gt;When you need do relative import, use explicit method &lt;code&gt;from . import foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Follow ordering of module import: stdlib, thrid-party, own.&lt;/li&gt;
&lt;li&gt;Use linters linke pylint, black, etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;things-to-remember&#34;&gt;Things to remember&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Follow the PEP style guide.&lt;/li&gt;
&lt;li&gt;Following common style facilitates collaboration with others.&lt;/li&gt;
&lt;li&gt;Consistent code style make it easier to modify later (include automation?).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;item-3-know-the-differences-between-bytes-and-str&#34;&gt;Item 3: Know the Differences Between bytes and str&lt;/h3&gt;
&lt;h4 id=&#34;sequence-data&#34;&gt;Sequence data&lt;/h4&gt;
&lt;p&gt;In python there are 2 types that represent sequences of characters
bytes and str&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte - RAW unsigned 8 bit value &lt;code&gt;b&#39;h\x65llo&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x65&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;llo&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x55&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
print(list(a))
print(a)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;str instances - &lt;a href=&#34;https://inomoz.com/posts/20220123015058-utf/&#34;&gt;Unicode&lt;/a&gt; code points, that represent textual characters from human language
str instances don&amp;rsquo;t have binary encoding&lt;/li&gt;
&lt;/ul&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\u0300&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; propos&amp;#39;&lt;/span&gt;
print(list(a))
print(a)
print(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;windows-1251&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;))
print(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The core of your program should use str type containg Unicode data, but can accept different encoding - latin1, big5 from interafaces.&lt;/p&gt;
&lt;p&gt;Use helper function to ensure th e inputs you operate are the type of character sequence that you expect.&lt;/p&gt;
&lt;p&gt;Bytes and str instances can be used together with operatos &amp;gt;, =, -, +, %&lt;/p&gt;
&lt;p&gt;If you want read or write bin data, open it in &amp;lsquo;rb&amp;rsquo; &amp;lsquo;rw&amp;rsquo; modes.&lt;/p&gt;
&lt;p&gt;If you want to read or write unicode data be careful about system encoding. Explictiy pass the encoding paramter to open if you want to avoid surprices.&lt;/p&gt;
&lt;p&gt;prefer f-strings&lt;/p&gt;
&lt;p&gt;format of f strinig: f&amp;rsquo;{key!r:&amp;lt;10} = {value:.2f}
{key!r} - raw
{key:&amp;lt;10} - left order (min width) - 10 characters
{value:.2f} - precision formatting
f&amp;rsquo;my number is {number:.{places}}?&lt;/p&gt;
&lt;p&gt;F-strings are sucinot yet powerful, because they allow for arbitray Pytho expression to be directly embedded within format specifiers.&lt;/p&gt;
&lt;p&gt;Write helperes functions instead of complex expressions&lt;/p&gt;
&lt;p&gt;Python&amp;rsquo;s syntax makes it easy to write single line epxressions that are overly complicated and difficult to read.&lt;/p&gt;
&lt;p&gt;Move complex expressions into helpere functions expeciialy if you need to use the same logic repeately&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fullstack Vue.js</title>
      <link>https://inomoz.com/posts/djirdehfullstackvuejs2021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/djirdehfullstackvuejs2021/</guid>
      <description>&lt;h2 id=&#34;djirdehFullstackVueJs2021&#34;&gt;Fullstack Vue.js&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Kill process by pattern</title>
      <link>https://inomoz.com/posts/20220209122942-kill_process_by_pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/20220209122942-kill_process_by_pattern/</guid>
      <description>&lt;p&gt;Use pkill -f, which matches the pattern for any part of the command line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pkill -f my_pattern&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just in case it doesn&amp;rsquo;t work, try to use this one as well:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pkill -9 -f my_pattern&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LEAN</title>
      <link>https://inomoz.com/posts/20220123190452-lean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/20220123190452-lean/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lean_software_development&#34;&gt;https://en.wikipedia.org/wiki/Lean_software_development&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lean software development is a translation of lean manufacturing principles and practices to the software development domain. Adapted from the Toyota Production System,[1] it is emerging with the support of a pro-lean subculture within the agile community. Lean offers a solid conceptual framework, values and principles, as well as good practices, derived from experience, that support agile organizations&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LeetCode examples</title>
      <link>https://inomoz.com/posts/20220203004140-leetcode_examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/20220203004140-leetcode_examples/</guid>
      <description>&lt;h2 id=&#34;array-in-java&#34;&gt;Array in Java&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        DVD&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; dvdCollection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DVD&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;15&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Create avenger item
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        DVD avengerDVD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DVD&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The avengers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 2012&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Joss Wedon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        dvdCollection&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; avengerDVD&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


    &lt;span style=&#34;color:#75715e&#34;&gt;// A simple definition for a DVD.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DVD&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; releaseYear&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String director&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DVD&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; releaseYear&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String director&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseYear&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; releaseYear&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;director&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; director&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, directed by &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;director&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, released in &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseYear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// The actual code for creating an Array to hold DVD&amp;#39;s.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Salesloop Tasks</title>
      <link>https://inomoz.com/posts/salesloop-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/salesloop-tasks/</guid>
      <description>&lt;h2 id=&#34;list&#34;&gt;list&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>The c programming language</title>
      <link>https://inomoz.com/posts/ritchieprogramminglanguage1990/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/ritchieprogramminglanguage1990/</guid>
      <description>&lt;h2 id=&#34;ritchieProgrammingLanguage1990&#34;&gt;The c programming language&lt;/h2&gt;
&lt;h3 id=&#34;chapter-1-a-tutorial-introduction&#34;&gt;Chapter 1 - A Tutorial Introduction&lt;/h3&gt;
&lt;h4 id=&#34;1-dot-1-getting-started&#34;&gt;1.1 Getting Started&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the only way&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Exist only one way to learn programming language, what is that way?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;The only way to learn programming language is writing programs in it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hello world&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Write simple hello-world program&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;hello, world&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C program&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;C program consist of?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;functions and variables&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;string&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;What this sequence called in C - &amp;ldquo;hello, world\n&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;character string or string constant&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;escape sequence chars&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;How much characters represent &lt;a href=&#34;https://inomoz.com/posts/20220119215704-escape_sequences/&#34;&gt;escape sequences&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Only one&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-dot-2-variables-and-arithmetic-expressions&#34;&gt;1.2 Variables and Arithmetic Expressions&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Types&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Which data types in C you know?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int \(-32768 \ldots +32767\)&lt;/li&gt;
&lt;li&gt;float 32 bit generally between \(10^{-38} \ldots 10^{38}\)&lt;/li&gt;
&lt;li&gt;char 1 byte&lt;/li&gt;
&lt;li&gt;short - integer&lt;/li&gt;
&lt;li&gt;long - integer&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;arrays&lt;/li&gt;
&lt;li&gt;structures&lt;/li&gt;
&lt;li&gt;unions&lt;/li&gt;
&lt;li&gt;pointers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Braces&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Is braces required if we have only one statement?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;No, braces is optional in this situation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Integer division&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Which problem exist in C when we use division of 2 integer numbers?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;In C (and in a lot of other programming languages), integer division truncates (any fractional part discarded).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;printf result&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;What will printed by this statement.
&lt;code&gt;printf(&amp;quot;%d\t%d\n&amp;quot;, fahr, celsius)&lt;/code&gt;, if fahr and celsius is integer values&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fahr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, celsius &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, fahr, celsius);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;1	2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Part of the C&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Is &lt;code&gt;printf&lt;/code&gt; is part of the C language?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;NO, &lt;code&gt;printf&lt;/code&gt; is useful function from std. library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Program fahr&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Can you write (even in pseudo code) Fahrenheit-Celsius convertion program?
Fahr formula is 5/9 &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* print Fahrenheit-Celsius table
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     for fahr = 0, 20, ..., 300; floating-point version */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#75715e&#34;&gt;/* initialization */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; fahr, celsius;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; lower, upper, step;

    lower &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;/* lower limit of temperatuire scale */&lt;/span&gt;
    upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;/* upper limit */&lt;/span&gt;
    step &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;

    fahr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lower;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fahr  Celsius&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (fahr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; upper) {
        celsius &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (fahr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32.0&lt;/span&gt;);
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%4.0f %6.1f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, fahr, celsius);
        fahr &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; step;
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%f fahr&amp;#34;&lt;/span&gt;, fahr);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Fahr  Celsius
0  -17.8
100   37.8
200   93.3
300  148.9&lt;/p&gt;
&lt;p&gt;400.000000 fahr&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implicit conversion&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;If you have 2 integer division what you will receive in result?
If one integer and second is float will situation change?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;If 2 integers, result will truncate (after dot). If one float, one integer - we convert integer to float first, then do division, result will be more precisely (no truncation after dot).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Digit formatting&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Which results you receive with this code (output)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%6d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.01&lt;/span&gt;);
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%6f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.01&lt;/span&gt;);
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%.2f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12.01&lt;/span&gt;);
printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%6.2f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.01&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;1
2
1.010000
4.010000
12.01
11.01&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-dot-3-the-for-statement&#34;&gt;1.3 The for statement&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Complicated expression of that type&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;In any context where it is premisible to use the value of some type you can?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;In any context where it is premisible to use the value of some type you can use a more complicated expression of that type.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Parts of for loop&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Can you explain which parts used in within for parentheses
&lt;code&gt;for (fahr = 0; fahr &amp;lt;= 300; fahr = fahr + 20)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Separeted by semicolons
First is initialization, executed only once, before the loop preper is entered.
Second part is test (or condition that control the loop)
Third part is increment step
Loop terminates if condition has became false.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reverse temp conversion program&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Write temperatuire convert program which print table in reverse order,
use for loop&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define LOWER 0     &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* lower limit of table */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define UPPER 300   &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* upper limit */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STEP 20     &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* step size */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; fahr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UPPER; fahr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; LOWER; fahr &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; STEP)
{
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%4.1f %6.1f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, fahr, (fahr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.8&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-dot-4-symbolic-constants&#34;&gt;1.4 Symbolic Constants&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define symbolic constant&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;How to define symbolic constant?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Just use this code &lt;code&gt;#define NAME replacement list /* optional comment */&lt;/code&gt;
No semicolons, name is uppercase.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-dot-5-character-input-and-output&#34;&gt;1.5 Character Input and Output&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Text stream&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;What is text stream?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Text stream is a sequence of characters divided into lines; each line is 0+ characters followed by a \n (newline character).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Getchar and putchar&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;How getchar is working?
How putchar is working?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;On calling getchar it&amp;rsquo;s reads next input character from a text stream and returns that as its value.&lt;/p&gt;
&lt;p&gt;Putchar prints a character each time it is called.
That character can be some integer variable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.5.1 File Copying&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input=Output&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Can you write program which copies its input to it&amp;rsquo;s output (quickly, just describe logic)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* copy input to output; 1st version */&lt;/span&gt;
main()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c;

    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar();      &lt;span style=&#34;color:#75715e&#34;&gt;/* read a character into stdin */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EOF) {  &lt;span style=&#34;color:#75715e&#34;&gt;/* while condition is true - char is not end of file */&lt;/span&gt;
        putchar(c);     &lt;span style=&#34;color:#75715e&#34;&gt;/* put char from c */&lt;/span&gt;
        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar();  &lt;span style=&#34;color:#75715e&#34;&gt;/* read char into c variable */&lt;/span&gt;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* copy input to output; 2st version */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
main()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar()) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EOF) {  &lt;span style=&#34;color:#75715e&#34;&gt;/* while condition is true - char is not end of file */&lt;/span&gt;
        putchar(c);     &lt;span style=&#34;color:#75715e&#34;&gt;/* put char from c */&lt;/span&gt;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exercises&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Print value of EOF.
Verify that getchar() != EOF is 0 or 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;code-snippet--my-function-with-cin&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EOF;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, c);
    printf(EOF); &lt;span style=&#34;color:#75715e&#34;&gt;/* nothing? */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--my-function-with-cin&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
 &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,b,c;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar()) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EOF){
    printf(c);
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.5.2 Character Counting&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;D&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Increment and decrement&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;How increment integer value? How decrement it? Can you explain difference?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;++var&lt;/code&gt; or &lt;code&gt;--var&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Increment prefix/postfix */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b)
{
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// POSTFIX
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, b);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a);

    &lt;span style=&#34;color:#75715e&#34;&gt;// PREFIX
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;b;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&amp;#34;&lt;/span&gt;, c);
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Driver code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, y;
    increment(x, y);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;5
6&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Character count program */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* count characters in input; 1st version */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (getchar() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EOF)
        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;counter;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\%ld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, counter);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;1.5.3 Line Counting&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;1.5.4 Word Counting&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-dot-6-arrays&#34;&gt;1.6 Arrays&lt;/h4&gt;
&lt;h4 id=&#34;1-dot-7-functions&#34;&gt;1.7 Functions&lt;/h4&gt;
&lt;h4 id=&#34;1-dot-8-arguments-call-by-value&#34;&gt;1.8 Arguments - Call by Value&lt;/h4&gt;
&lt;h4 id=&#34;1-dot-9-character-arrays&#34;&gt;1.9 Character Arrays&lt;/h4&gt;
&lt;h4 id=&#34;1-dot-10-external-variables-and-scope&#34;&gt;1.10 External Variables and Scope&lt;/h4&gt;
&lt;h3 id=&#34;chapter-2-types-operators-and-expressions&#34;&gt;Chapter 2 - Types, Operators and Expressions&lt;/h3&gt;
&lt;h4 id=&#34;2-dot-1-variable-names&#34;&gt;2.1 Variable Names&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-2-data-types-and-sizes&#34;&gt;2.2 Data Types and Sizes&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-3-constants&#34;&gt;2.3 Constants&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-4-declarations&#34;&gt;2.4 Declarations&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-5-arithmetic-operators&#34;&gt;2.5 Arithmetic Operators&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-6-relational-and-logical-operators&#34;&gt;2.6 Relational and Logical Operators&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-7-type-conversions&#34;&gt;2.7 Type Conversions&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;Link on page 43: &lt;a href=&#34;http://www.buginword.com&#34;&gt;moted to the ``higher&#39;&#39; type before the operation proceeds. The result is of the integer type. Section 6 of Appendix A states the conversion rules precisely. If there are no unsigned operands, however&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-dot-8-increment-and-decrement-operators&#34;&gt;2.8 Increment and Decrement Operators&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-9-bitwise-operators&#34;&gt;2.9 Bitwise Operators&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-10-assignment-operators-and-expressions&#34;&gt;2.10 Assignment Operators and Expressions&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-11-conditional-expressions&#34;&gt;2.11 Conditional Expressions&lt;/h4&gt;
&lt;h4 id=&#34;2-dot-12-precedence-and-order-of-evaluation&#34;&gt;2.12 Precedence and Order of Evaluation&lt;/h4&gt;
&lt;h3 id=&#34;chapter-3-control-flow&#34;&gt;Chapter 3 - Control Flow&lt;/h3&gt;
&lt;h4 id=&#34;3-dot-1-statements-and-blocks&#34;&gt;3.1 Statements and Blocks&lt;/h4&gt;
&lt;h4 id=&#34;3-dot-2-if-else&#34;&gt;3.2 If-Else&lt;/h4&gt;
&lt;h4 id=&#34;3-dot-3-else-if&#34;&gt;3.3 Else-If&lt;/h4&gt;
&lt;h4 id=&#34;3-dot-4-switch&#34;&gt;3.4 Switch&lt;/h4&gt;
&lt;h4 id=&#34;3-dot-5-loops-while-and-for&#34;&gt;3.5 Loops - While and For&lt;/h4&gt;
&lt;h4 id=&#34;3-dot-6-loops-do-while&#34;&gt;3.6 Loops - Do-While&lt;/h4&gt;
&lt;h4 id=&#34;3-dot-7-break-and-continue&#34;&gt;3.7 Break and Continue&lt;/h4&gt;
&lt;h4 id=&#34;3-dot-8-goto-and-labels&#34;&gt;3.8 Goto and labels&lt;/h4&gt;
&lt;h3 id=&#34;chapter-4-functions-and-program-structure&#34;&gt;Chapter 4 - Functions and Program Structure&lt;/h3&gt;
&lt;h4 id=&#34;4-dot-1-basics-of-functions&#34;&gt;4.1 Basics of Functions&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-2-functions-returning-non-integers&#34;&gt;4.2 Functions Returning Non-integers&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-3-external-variables&#34;&gt;4.3 External Variables&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-4-scope-rules&#34;&gt;4.4 Scope Rules&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-5-header-files&#34;&gt;4.5 Header Files&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-6-static-variables&#34;&gt;4.6 Static Variables&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-7-register-variables&#34;&gt;4.7 Register Variables&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-8-block-structure&#34;&gt;4.8 Block Structure&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-9-initialization&#34;&gt;4.9 Initialization&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-10-recursion&#34;&gt;4.10 Recursion&lt;/h4&gt;
&lt;h4 id=&#34;4-dot-11-the-c-preprocessor&#34;&gt;4.11 The C Preprocessor&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;4.11.1 File Inclusion&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;4.11.2 Macro Substitution&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;4.11.3 Conditional Inclusion&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter-5-pointers-and-arrays&#34;&gt;Chapter 5 - Pointers and Arrays&lt;/h3&gt;
&lt;h4 id=&#34;5-dot-1-pointers-and-addresses&#34;&gt;5.1 Pointers and Addresses&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-2-pointers-and-function-arguments&#34;&gt;5.2 Pointers and Function Arguments&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-3-pointers-and-arrays&#34;&gt;5.3 Pointers and Arrays&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-4-address-arithmetic&#34;&gt;5.4 Address Arithmetic&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-5-character-pointers-and-functions&#34;&gt;5.5 Character Pointers and Functions&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-6-pointer-arrays-pointers-to-pointers&#34;&gt;5.6 Pointer Arrays; Pointers to Pointers&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-7-multi-dimensional-arrays&#34;&gt;5.7 Multi-dimensional Arrays&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-8-initialization-of-pointer-arrays&#34;&gt;5.8 Initialization of Pointer Arrays&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-9-pointers-vs-dot-multi-dimensional-arrays&#34;&gt;5.9 Pointers vs. Multi-dimensional Arrays&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-10-command-line-arguments&#34;&gt;5.10 Command-line Arguments&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-11-pointers-to-functions&#34;&gt;5.11 Pointers to Functions&lt;/h4&gt;
&lt;h4 id=&#34;5-dot-12-complicated-declarations&#34;&gt;5.12 Complicated Declarations&lt;/h4&gt;
&lt;h3 id=&#34;chapter-6-structures&#34;&gt;Chapter 6 - Structures&lt;/h3&gt;
&lt;h4 id=&#34;6-dot-1-basics-of-structures&#34;&gt;6.1 Basics of Structures&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-2-structures-and-functions&#34;&gt;6.2 Structures and Functions&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-3-arrays-of-structures&#34;&gt;6.3 Arrays of Structures&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-4-pointers-to-structures&#34;&gt;6.4 Pointers to Structures&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-5-self-referential-structures&#34;&gt;6.5 Self-referential Structures&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-6-table-lookup&#34;&gt;6.6 Table Lookup&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-7-typedef&#34;&gt;6.7 Typedef&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-8-unions&#34;&gt;6.8 Unions&lt;/h4&gt;
&lt;h4 id=&#34;6-dot-9-bit-fields&#34;&gt;6.9 Bit-fields&lt;/h4&gt;
&lt;h3 id=&#34;chapter-7-input-and-output&#34;&gt;Chapter 7 - Input and Output&lt;/h3&gt;
&lt;h4 id=&#34;7-dot-1-standard-input-and-output&#34;&gt;7.1 Standard Input and Output&lt;/h4&gt;
&lt;h4 id=&#34;7-dot-2-formatted-output-printf&#34;&gt;7.2 Formatted Output - printf&lt;/h4&gt;
&lt;h4 id=&#34;7-dot-3-variable-length-argument-lists&#34;&gt;7.3 Variable-length Argument Lists&lt;/h4&gt;
&lt;h4 id=&#34;7-dot-4-formatted-input-scanf&#34;&gt;7.4 Formatted Input - Scanf&lt;/h4&gt;
&lt;h4 id=&#34;7-dot-5-file-access&#34;&gt;7.5 File Access&lt;/h4&gt;
&lt;h4 id=&#34;7-dot-6-error-handling-stderr-and-exit&#34;&gt;7.6 Error Handling - Stderr and Exit&lt;/h4&gt;
&lt;h4 id=&#34;7-dot-7-line-input-and-output&#34;&gt;7.7 Line Input and Output&lt;/h4&gt;
&lt;h4 id=&#34;7-dot-8-miscellaneous-functions&#34;&gt;7.8 Miscellaneous Functions&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;7.8.1 String Operations&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;7.8.2 Character Class Testing and Conversion&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;7.8.3 Ungetc&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;7.8.4 Command Execution&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;7.8.5 Storage Management&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;7.8.6 Mathematical Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;7.8.7 Random Number generation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chapter-8-the-unix-system-interface&#34;&gt;Chapter 8 - The UNIX System Interface&lt;/h3&gt;
&lt;h4 id=&#34;8-dot-1-file-descriptors&#34;&gt;8.1 File Descriptors&lt;/h4&gt;
&lt;h4 id=&#34;8-dot-2-low-level-i-o-read-and-write&#34;&gt;8.2 Low Level I/O - Read and Write&lt;/h4&gt;
&lt;h4 id=&#34;8-dot-3-open-creat-close-unlink&#34;&gt;8.3 Open, Creat, Close, Unlink&lt;/h4&gt;
&lt;h4 id=&#34;8-dot-4-random-access-lseek&#34;&gt;8.4 Random Access - Lseek&lt;/h4&gt;
&lt;h4 id=&#34;8-dot-5-example-an-implementation-of-fopen-and-getc&#34;&gt;8.5 Example - An implementation of Fopen and Getc&lt;/h4&gt;
&lt;h4 id=&#34;8-dot-6-example-listing-directories&#34;&gt;8.6 Example - Listing Directories&lt;/h4&gt;
&lt;h4 id=&#34;8-dot-7-example-a-storage-allocator&#34;&gt;8.7 Example - A Storage Allocator&lt;/h4&gt;
&lt;h3 id=&#34;appendix-a-reference-manual&#34;&gt;Appendix A - Reference Manual&lt;/h3&gt;
&lt;h4 id=&#34;a-dot-1-introduction&#34;&gt;A.1 Introduction&lt;/h4&gt;
&lt;h4 id=&#34;a-dot-2-lexical-conventions&#34;&gt;A.2 Lexical Conventions&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.1 Tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.2 Comments&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.3 Identifiers&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.4 Keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A.2.5 Constants&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.5.1 Integer Constants&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.5.2 Character Constants&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.5.3 Floating Constants&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A2.5.4 Enumeration Constants&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.2.6 String Literals&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-3-syntax-notation&#34;&gt;A.3 Syntax Notation&lt;/h4&gt;
&lt;h4 id=&#34;a-dot-4-meaning-of-identifiers&#34;&gt;A.4 Meaning of Identifiers&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.4.1 Storage Class&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.4.2 Basic Types&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.4.3 Derived types&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.4.4 Type Qualifiers&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-5-objects-and-lvalues&#34;&gt;A.5 Objects and Lvalues&lt;/h4&gt;
&lt;h4 id=&#34;a-dot-6-conversions&#34;&gt;A.6 Conversions&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.1 Integral Promotion&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.2 Integral Conversions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.3 Integer and Floating&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.4 Floating Types&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.5 Arithmetic Conversions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.6 Pointers and Integers&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.7 Void&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.6.8 Pointers to Void&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-7-expressions&#34;&gt;A.7 Expressions&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.1 Pointer Conversion&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.2 Primary Expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A.7.3 Postfix Expressions&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.3.1 Array References&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.3.2 Function Calls&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.3.3 Structure References&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.3.4 Postfix Incrementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A.7.4 Unary Operators&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.1 Prefix Incrementation Operators&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.2 Address Operator&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.3 Indirection Operator&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.4 Unary Plus Operator&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.5 Unary Minus Operator&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.6 One&amp;rsquo;s Complement Operator&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.7 Logical Negation Operator&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.4.8 Sizeof Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.5 Casts&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.6 Multiplicative Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.7 Additive Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.8 Shift Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.9 Relational Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.10 Equality Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.11 Bitwise AND Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.12 Bitwise Exclusive OR Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.13 Bitwise Inclusive OR Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.14 Logical AND Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.15 Logical OR Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.16 Conditional Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.17 Assignment Expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.18 Comma Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.7.19 Constant Expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-8-declarations&#34;&gt;A.8 Declarations&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.1 Storage Class Specifiers&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.2 Type Specifiers&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.3 Structure and Union Declarations&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.4 Enumerations&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.5 Declarators&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A.8.6 Meaning of Declarators&lt;/p&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.6.1 Pointer Declarators&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.6.2 Array Declarators&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.6.3 Function Declarators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.7 Initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.8 Type names&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.9 Typedef&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.8.10 Type Equivalence&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-9-statements&#34;&gt;A.9 Statements&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.9.1 Labeled Statements&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.9.2 Expression Statement&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.9.3 Compound Statement&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.9.4 Selection Statements&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.9.5 Iteration Statements&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.9.6 Jump statements&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-10-external-declarations&#34;&gt;A.10 External Declarations&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.10.1 Function Definitions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.10.2 External Declarations&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-11-scope-and-linkage&#34;&gt;A.11 Scope and Linkage&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.11.1 Lexical Scope&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.11.2 Linkage&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-12-preprocessing&#34;&gt;A.12 Preprocessing&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.1 Trigraph Sequences&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.2 Line Splicing&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.3 Macro Definition and Expansion&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.4 File Inclusion&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.5 Conditional Compilation&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.6 Line Control&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.7 Error Generation&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.8 Pragmas&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.9 Null directive&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;A.12.10 Predefined names&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-dot-13-grammar&#34;&gt;A.13 Grammar&lt;/h4&gt;
&lt;h3 id=&#34;appendix-b-standard-library&#34;&gt;Appendix B - Standard Library&lt;/h3&gt;
&lt;h4 id=&#34;b-dot-1-input-and-output-stdio-dot-h&#34;&gt;B.1 Input and Output: &amp;lt;stdio.h&amp;gt;&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;B.1.1 File Operations&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;B.1.2 Formatted Output&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;B.1.3 Formatted Input&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;B.1.4 Character Input and Output Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;B.1.5 Direct Input and Output Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;B.1.6 File Positioning Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;B.1.7 Error Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;b-dot-2-character-class-tests-ctype-dot-h&#34;&gt;B.2 Character Class Tests: &amp;lt;ctype.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-3-string-functions-string-dot-h&#34;&gt;B.3 String Functions: &amp;lt;string.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-4-mathematical-functions-math-dot-h&#34;&gt;B.4 Mathematical Functions: &amp;lt;math.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-5-utility-functions-stdlib-dot-h&#34;&gt;B.5 Utility Functions: &amp;lt;stdlib.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-6-diagnostics-assert-dot-h&#34;&gt;B.6 Diagnostics: &amp;lt;assert.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-7-variable-argument-lists-stdarg-dot-h&#34;&gt;B.7 Variable Argument Lists: &amp;lt;stdarg.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-8-non-local-jumps-setjmp-dot-h&#34;&gt;B.8 Non-local Jumps: &amp;lt;setjmp.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-9-signals-signal-dot-h&#34;&gt;B.9 Signals: &amp;lt;signal.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-10-date-and-time-functions-time-dot-h&#34;&gt;B.10 Date and Time Functions: &amp;lt;time.h&amp;gt;&lt;/h4&gt;
&lt;h4 id=&#34;b-dot-11-implementation-defined-limits-limits-dot-h-and-float-dot-h&#34;&gt;B.11 Implementation-defined Limits: &amp;lt;limits.h&amp;gt; and &amp;lt;float.h&amp;gt;&lt;/h4&gt;
&lt;h3 id=&#34;appendix-c-summary-of-changes&#34;&gt;Appendix C - Summary of Changes&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>The clean coder: A code of conduct for professional programmers</title>
      <link>https://inomoz.com/posts/martincleancodercode2011/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/martincleancodercode2011/</guid>
      <description>&lt;h2 id=&#34;martinCleanCoderCode2011&#34;&gt;The clean coder: A code of conduct for professional programmers&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>The pragmatic programmer: From journeyman to master</title>
      <link>https://inomoz.com/posts/huntpragmaticprogrammerjourneyman1999/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/huntpragmaticprogrammerjourneyman1999/</guid>
      <description>&lt;h2 id=&#34;huntPragmaticProgrammerJourneyman1999&#34;&gt;The pragmatic programmer: From journeyman to master&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Two scoops of django 3.x</title>
      <link>https://inomoz.com/posts/feldroytwoscoopsdjango101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/feldroytwoscoopsdjango101/</guid>
      <description>&lt;h2 id=&#34;feldroyTwoScoopsDjango101&#34;&gt;Two scoops of django 3.x&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>UTF</title>
      <link>https://inomoz.com/posts/20220123015058-utf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/20220123015058-utf/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode&#34;&gt;https://en.wikipedia.org/wiki/Unicode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unicode, formally the Unicode Standard, is an information technology standard for the consistent encoding, representation, and handling of text expressed in most of the world&amp;rsquo;s writing systems. The standard, which is maintained by the Unicode Consortium, defines 144,697 characters[1][2] covering 159 modern and historic scripts, as well as symbols, emoji, and non-visual control and formatting codes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Код: тайный язык информатики</title>
      <link>https://inomoz.com/posts/petzoldkodtaynyyyazyk101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/petzoldkodtaynyyyazyk101/</guid>
      <description>&lt;h2 id=&#34;petzoldKodTaynyyYazyk101&#34;&gt;Код: тайный язык информатики&lt;/h2&gt;
&lt;h3 id=&#34;предисловие-к-оригинальному-изданию&#34;&gt;Предисловие к оригинальному изданию&lt;/h3&gt;
&lt;h4 id=&#34;разница-между-оперативной-и-дисковой-памятью&#34;&gt;Разница между оперативной и дисковой памятью&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Чем обсуловлена разница между оперативной и дисковой памятью?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Эта разница довольно условна (исскуственная), она обусловлена лишь тем что в настоящий момент отсутсвует единый энергонезависимый и быстродействующий носитель (но есть тенденция к изменениям - SSD NVRAM, etc&amp;hellip;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;иерархичность-компьютеров&#34;&gt;Иерархичность компьютеров&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Какие уровни иерархии компьютера вы знаете?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;По своей сути компьютеры (и я так думаю сопутствующие технологии) иерархичны.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Самый нижний уровень, транзисторы.&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;Информация которая выводится на монитор (пиксели).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;код-это&#34;&gt;Код это&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Какие определения кода вы знаете?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Система сигналов для представления букв и цифр при передачи сообщений.&lt;/li&gt;
&lt;li&gt;Система символов, букв или слов, которым присваиваются некоторые произвольно подобранные значения (для передачи конфендициальной информации).&lt;/li&gt;
&lt;li&gt;Система символов, применяемая для представления компьютерных команд&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Глава 1 лучшие друзья&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;глава-1-dot-лучшие-друзья&#34;&gt;Глава 1. Лучшие друзья&lt;/h3&gt;
&lt;h4 id=&#34;обмен-информацией&#34;&gt;Обмен информацией&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Допустим вы владеете алфавитом и у вас есть 2 фонарика, каким образом можно обменятся информацией при их помощи?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Можно рисовать буквы в воздухе, но этот метод крайне неточен и малоэффективен.&lt;/p&gt;
&lt;p&gt;Можно кодировать каждую букву алфавита последовательностями бликов, А - 1 блик, Б - 2 блика и т.д.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;коммуникация&#34;&gt;Коммуникация&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Стремится ли человек к коммуникаци? Что обеспечивает коммуникацию?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Человек стремится (желает) к коммуникации - считается что это одно из множества
характеризующих человека качеств.
Человек это социальное существо, ему необходимо общество других людей.&lt;/p&gt;
&lt;p&gt;Код обеспечивает коммуникацию (при помощи кода можно организовать коммуникацию).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;азбука-морзе&#34;&gt;Азбука морзе&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Сколько видов сигналов в азбуке морзе?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;В азбуке морзе 2 вида бликов / звуков (сигналов). короткие и долгие (точки и тире).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inomoz.com/ox-hugo/20220130-223511_screenshot.png&#34; alt=&#34;&#34;&gt;
Рис. Азбука морзе.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cловарь&#34;&gt;Cловарь&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Является ли словарь кодом?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Можно сказать что словарь, это своеобразный код.
При этом словарь описывает человечекую речь.
Речь так-же можно охаректиризовать как код, так-как мы используем различные звуки и слова для кодирования информации.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;виды-кодов&#34;&gt;Виды кодов&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;В реальной жизни мы используем множество различных кодов, речь, писменность, азбука морзе и т.д. Прослеживается ли такая тенденция в компьютере?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Да, в компьютере применяются различные типы кодов для хранения и передачи чисел, текста, звуков, музыки, изображений и видео. Причем для каждого типа используется множество различных кодов.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;основы-азбуки-морзе&#34;&gt;Основы азбуки морзе&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Какие основы азбуки Морзе вы знаете?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Точка - базовый сигнал (допустим 1 секунда).
Тире - втрое длинее точки - вторичный сигнал (длительность 3*длительность точки).&lt;/p&gt;
&lt;p&gt;Пауза между безовым и вторичным сигналом равна длительности точки (допустим 1 секунда).
Пауза между словами 2 тире (допустим 1 * 3 * 2 = 6 секунд)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;способ-кодирования&#34;&gt;Способ кодирования&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Выбраны ли коды в азбуке морзе произвольно или использовался какой-то принцип?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;В азбуе морзе (как и в схожих по своей сути кодах) используется частотный принцип. То есть чем чаще используется кусок информации (частотность букв, символов и т.д.) тем проще он закодирован.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;глава-2-dot-коды-и-комбинации&#34;&gt;Глава 2. Коды и комбинации&lt;/h3&gt;
&lt;p&gt;что значит двоичный?
что такое комбинаторный анализ?&lt;/p&gt;
&lt;h4 id=&#34;комбинации-в-коде&#34;&gt;Комбинации в коде&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Комбинация - это?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Последовательность кодовых символов, соответствующих одному элементу (символу) дискретного сообщении.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;значность&#34;&gt;Значность&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Число символов в кодовой комбинации называется?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Значностью кода.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;зависимость-количества-символов-и-кодов&#34;&gt;Зависимость количества символов и кодов&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Как найти количество кодов в азбуке морзе? Если мы знаем количество точек и тире.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;\(codes=2^{number}\)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;граф-азбуки-морзе&#34;&gt;Граф азбуки морзе&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Попробуйте описать схему азбуки морзе для определения кода морзе (комбинация -&amp;gt; символ). Схема выполнена в виде графа связей.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;В схеме постепенно усложняются последовательности точек и тире. Для расшифровки читаем схему слева направо.
Декодируется в таком порядке: разбиваем комбинацию на символы (точка или тире), ищем начальный символ в графе, затем следующий символ в графе и так пока мы не пройдем через все символы.
Соответственно у нас есть граф связей по 1 символу (символ -&amp;gt; стрелка), и они определены в соответствии с частотой символов. Точки у нас всегда слева, тире всегда справа. Определяем комбинацию по стрелкам.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://inomoz.com/ox-hugo/20220131-114323_screenshot.png&#34;/&gt;
&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;двоичный&#34;&gt;Двоичный&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front&lt;/p&gt;
&lt;p&gt;Что значит двоичный на примере азбуки морзе?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Back&lt;/p&gt;
&lt;p&gt;Код морзе двоичный (буквально два на два), так-как каждая комбинация в этом коде включает только 2 символа - точку и тире.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;глава-3-dot-брайль-и-двоичные-коды&#34;&gt;Глава 3. Брайль и двоичные коды&lt;/h3&gt;
&lt;h3 id=&#34;глава-4-dot-устройство-фонарика&#34;&gt;Глава 4. Устройство фонарика&lt;/h3&gt;
&lt;h3 id=&#34;глава-5-dot-заглядывая-за-угол&#34;&gt;Глава 5. Заглядывая за угол&lt;/h3&gt;
&lt;h3 id=&#34;глава-6-dot-телеграфы-и-реле&#34;&gt;Глава 6. Телеграфы и реле&lt;/h3&gt;
&lt;h3 id=&#34;глава-7-dot-наши-десять-цифр&#34;&gt;Глава 7. Наши десять цифр&lt;/h3&gt;
&lt;h3 id=&#34;глава-8-dot-альтернативы-десятке&#34;&gt;Глава 8. Альтернативы десятке&lt;/h3&gt;
&lt;h3 id=&#34;глава-9-dot-за-битом-бит&#34;&gt;Глава 9. За битом бит&lt;/h3&gt;
&lt;h3 id=&#34;глава-10-dot-логика-и-переключатели&#34;&gt;Глава 10. Логика и переключатели&lt;/h3&gt;
&lt;h3 id=&#34;глава-11-dot-логические-вентили&#34;&gt;Глава 11. Логические вентили&lt;/h3&gt;
&lt;h3 id=&#34;глава-12-dot-двоичный-сумматор&#34;&gt;Глава 12. Двоичный сумматор&lt;/h3&gt;
&lt;h3 id=&#34;глава-13-dot-а-как-насчет-вычитания&#34;&gt;Глава 13. А как насчет вычитания?&lt;/h3&gt;
&lt;h3 id=&#34;глава-14-dot-обратная-связь-и-триггеры&#34;&gt;Глава 14. Обратная связь и триггеры&lt;/h3&gt;
&lt;h3 id=&#34;глава-15-dot-байты-и-шестнадцатеричные-числа&#34;&gt;Глава 15. Байты и шестнадцатеричные числа&lt;/h3&gt;
&lt;h3 id=&#34;глава-16-dot-сборка-памяти&#34;&gt;Глава 16. Сборка памяти&lt;/h3&gt;
&lt;h3 id=&#34;глава-17-dot-автоматизация&#34;&gt;Глава 17. Автоматизация&lt;/h3&gt;
&lt;h3 id=&#34;глава-18-dot-от-счетов-к-микросхемам&#34;&gt;Глава 18. От счетов к микросхемам&lt;/h3&gt;
&lt;h3 id=&#34;глава-19-dot-два-классических-микропроцессора&#34;&gt;Глава 19. Два классических микропроцессора&lt;/h3&gt;
&lt;h3 id=&#34;глава-20-dot-набор-символов-ascii&#34;&gt;Глава 20. Набор символов ASCII&lt;/h3&gt;
&lt;h3 id=&#34;глава-21-dot-шины&#34;&gt;Глава 21. Шины&lt;/h3&gt;
&lt;h3 id=&#34;глава-22-dot-операционная-система&#34;&gt;Глава 22. Операционная система&lt;/h3&gt;
&lt;h3 id=&#34;глава-23-dot-фиксированная-точка-плавающая-точка&#34;&gt;Глава 23. Фиксированная точка, плавающая точка&lt;/h3&gt;
&lt;h3 id=&#34;глава-24-dot-языки-высокого-и-низкого-уровня&#34;&gt;Глава 24. Языки высокого и низкого уровня&lt;/h3&gt;
&lt;h3 id=&#34;глава-25-dot-графическая-революция&#34;&gt;Глава 25. Графическая революция&lt;/h3&gt;
&lt;h3 id=&#34;благодарности&#34;&gt;Благодарности&lt;/h3&gt;
&lt;p&gt;Электронная теория - господствующая научная мудрость, характеризующая природу электричества.&lt;/p&gt;
&lt;p&gt;Любая материя вещества состоит из атомов.&lt;/p&gt;
&lt;p&gt;В атом входят (в порядке важности/структуры): ядро (как в нашей планете или как солнце) состоящее из нейтронов и протонов и электроны (которые вращаются вокруг ядра, как вокруг солнца).
Это планетарная модель (не совсем соответсвует действительности).&lt;/p&gt;
&lt;p&gt;Атомное число указывает сколько протонов в ядре у атома. При этом зная атомную массу, можно найти количество нейтронов. N = M - n, где N - количество нейтронов, M - атомная масса, n - атомный номер (равен числу протонов).&lt;/p&gt;
&lt;p&gt;Молекулы одного типа (воды, соли и т.д.) образуют соединение.&lt;/p&gt;
&lt;p&gt;Соединение молекул обычно образуют смесь (например водно-соляной раствор, в котором вода и соль сохраняют свои свойства).&lt;/p&gt;
&lt;p&gt;Количество электронов в атоме обычно равно количеству протонов (бывает что электроны вышибаются из атомов, образуя электричество).&lt;/p&gt;
&lt;p&gt;У протонов и электронов есть общее свойство - электрический заряд. У протона положительный, а у электрона отрицательный, нейтроны при этом нейтральны.&lt;/p&gt;
&lt;p&gt;Взаимосвязь между протонами и электронами можно описать как противоположные заряды притягиваются, одноименные отталкиваются.&lt;/p&gt;
&lt;p&gt;Протоны удерживаются в ядре благодоря сильному взаимодействию (цветовое взаимодействие, ядерное взаимодействие).&lt;/p&gt;
&lt;p&gt;Электричество в цепи это переход электронов от атома к атому.&lt;/p&gt;
&lt;p&gt;Минус батарейки - катод, или отрицательная клемма.&lt;/p&gt;
&lt;p&gt;Плюс батарейки - анод, или положительная клемма.&lt;/p&gt;
&lt;p&gt;Электроны идентичны&lt;/p&gt;
&lt;p&gt;Батареи можно подключить параллельно (для увеличения общего заряда ) или последовательно (для увеличения мощности).&lt;/p&gt;
&lt;p&gt;Проводник - обычно это вещество у которого на внешней оболочке (энергетический уровень или орбиталь) всего один электрон, и это вещество легко отдает его.&lt;/p&gt;
&lt;p&gt;Некоторые вещества сильнее сопротивляются току  (это называется сопротивлением) их называют резисторы.&lt;/p&gt;
&lt;p&gt;При достаточно высоком напряжении практически любой материал приобретатет электропроводность.&lt;/p&gt;
&lt;p&gt;Чем толще провод тем выше его проводимость.&lt;/p&gt;
&lt;p&gt;Напряжение описывает потенциал для выполнения работы.&lt;/p&gt;
&lt;p&gt;Сила тока зависит от того сколько электронов мчится по проводнику.&lt;/p&gt;
&lt;p&gt;Ток подобен объему воды проходящему через трубу в ед. времени.
Напряжение давлению воды.
Сопротовиление ширина трубы.&lt;/p&gt;
&lt;p&gt;Объем воды текущий через трубу (ток) в еденицу времени прямо пропорионален давлению воды (напряжению) и обратно пропорионален толщине трубы (сопротивлению).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Кратчайший Курс Школьной Математики</title>
      <link>https://inomoz.com/posts/alexandremelinkratchayshiykursshkolnoy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/alexandremelinkratchayshiykursshkolnoy/</guid>
      <description>&lt;h2 id=&#34;alexandremelinKratchayshiyKursShkolnoy&#34;&gt;Кратчайший Курс Школьной Математики&lt;/h2&gt;
&lt;h3 id=&#34;числа&#34;&gt;Числа&lt;/h3&gt;
&lt;p&gt;Цифры - это числовые символы при помощи который записываются &lt;strong&gt;числа&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Исторически первыми числами были натуральные числа, для подсчета людей, кур, овец, монет и т.д.&lt;/p&gt;
&lt;p&gt;Для краткости множесто натуральных чисел \(\{1,2,3,4,5,6,7,8,9,10,11,12,\ldots\}\) обозначают буквой \(N\).&lt;/p&gt;
&lt;p&gt;Римский вариант натуральных чисел \(\{I,II,III,IV,V,VI,VII,VIII,IXX\}\)&lt;/p&gt;
&lt;p&gt;Иногда к множеству натуральных чисел относят ноль: \(0 \in N\)&lt;/p&gt;
&lt;p&gt;Значок \(\in\) символизирует принадлежность к множеству.&lt;/p&gt;
&lt;p&gt;Элементы произвольного множества принято записывать в \(\{\}\) фигурных скобках.&lt;/p&gt;
&lt;p&gt;Если множество не содержит элементов, то его называют пустым и обозначают символом \(\varnothing\).&lt;/p&gt;
&lt;p&gt;Если к множеству \(N\) присоеденить ноль и те-же отрицательные числа (с противоположным знаком), ты мы получим &lt;strong&gt;множество целых чисел&lt;/strong&gt; \(Z\).&lt;/p&gt;
&lt;p&gt;\(Z=\{\ldots,-3,-2,-1,0,1,2,3,\ldots\}\)  \(Z=\{0,\pm 1,\pm 2\,\pm 3,\ldots\}\)&lt;/p&gt;
&lt;p&gt;Натуральные числа являются &lt;strong&gt;подмножеством&lt;/strong&gt; множества &lt;strong&gt;&lt;strong&gt;целых&lt;/strong&gt;&lt;/strong&gt; чисел \(N \subset Z\) (\(\subset\) знак включения).&lt;/p&gt;
&lt;h3 id=&#34;признаки-делимости-числа&#34;&gt;Признаки делимости числа&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;целое число делится на 2 без остатка, если оно заканичается на 0, 2, 4, 6 или 8 (четное число)&lt;/li&gt;
&lt;li&gt;целое число делится на 3 без остатка, если сумма входящих в него цифр делится на 3.&lt;/li&gt;
&lt;li&gt;целое число делится на 5, если оно заканичается пятеркой или нулем.&lt;/li&gt;
&lt;li&gt;целое число делится на 10, если оно заканичается на 0.
для того чтобы разделить на 10 нужно просто убрать 0, на 100 два нуля, на 1000 три нуля и т.д.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;рациональные-числа&#34;&gt;Рациональные числа&lt;/h3&gt;
&lt;p&gt;Дале идет множетсво &lt;strong&gt;рациональных&lt;/strong&gt; чисел.&lt;/p&gt;
&lt;p&gt;\(Q = \{\frac{m}{n} \mid m \in Z, n \in N\}\)&lt;/p&gt;
&lt;p&gt;Любое рациональное число можно представить как обыкновенную дробь \(\frac{m}{n}\) с целым числителем (верхнее число) и натуральным знаменателем (нижнее число).&lt;/p&gt;
&lt;p&gt;Рис. Привильная дробь на примере разделения торта.&lt;/p&gt;
&lt;p&gt;Правильная дробь - эта та у которой числитель меньше знаменателя.
Правильная дробь обязательно меньше еденицы.&lt;/p&gt;
&lt;p&gt;Если взять все куски торта (или дополнительно добавить еще куски), то мы получим неправильную дробь, например \(\frac{10}{10}\), \(\frac{7}{4}\).&lt;/p&gt;
&lt;p&gt;Дроби с целой и дробной частью (например \(1\frac{3}{4}\)) называют &lt;strong&gt;смешанными&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;опозновательные-знаки-рациональных-чисел&#34;&gt;Опозновательные знаки рациональных чисел&lt;/h3&gt;
&lt;p&gt;при делении числителя на знаменатель получается&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;целое число \(\frac{-3}{1} = -3\)&lt;/li&gt;
&lt;li&gt;конечная десятичная дробь \(\frac{3}{8} = 0.375\)&lt;/li&gt;
&lt;li&gt;бесконечная периодическая десятичная дробь (повтор может начаться не сразу) \(\frac{7}{11} = 0.6363636363 \ldots\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;аксиома-все-действия-выполняем-в-дробях&#34;&gt;Аксиома - все действия выполняем в дробях&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;В высшей математике все действия стремимся выполнять в обыкновенных (правильных и неправильных) дробях, НЕ в десятичных&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;иррациональные-числа&#34;&gt;Иррациональные числа&lt;/h3&gt;
&lt;p&gt;Следущее множество - это множество &lt;strong&gt;иррациональных чисел&lt;/strong&gt;, каждое такое число представлено в виде бесконечной НЕПЕРИОДИЧЕСКОЙ десятичной дроби.&lt;/p&gt;
&lt;p&gt;Примеры таких чисел:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math

print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqrt(2) &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.50f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pi &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pi&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.50f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;e&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.50f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golden &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.50f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;правило-округления-дробей&#34;&gt;Правило округления дробей&lt;/h3&gt;
&lt;p&gt;Округление десятичных дробей - допустим мы округляем до некоторого знака
1,33333333333336789999999
^ округляем до этого знака (до 12 знака после запятой)&lt;/p&gt;
&lt;p&gt;Нам нужно посмотреть на следующий разряд, если там 0,1,2,3,4 ДО 5, округляем в меньшую сторону ( +0 к 12 знаку ), иначе (5, 6, 7, 8, 9) в большую сторону (+1 к 12 знаку).&lt;/p&gt;
&lt;p&gt;Проверка, должно получится 1,333333333333&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in  1.333333333333&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.33333333333336789999999&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in  1.36&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;round(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.356&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Смотрим на N+1 знак если &amp;lt; 5 +0, иначе +1&lt;/p&gt;
&lt;h3 id=&#34;действительные-числа&#34;&gt;Действительные числа&lt;/h3&gt;
&lt;p&gt;Объединение рациональных и иррациональных чисел образует множество &lt;strong&gt;действительных (вещественных) чисел&lt;/strong&gt;:
\(Q \cup I = R\) (\(\cup\) - значок объединения множеств).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://inomoz.com/ox-hugo/20220129-010029_screenshot.png&#34; alt=&#34;&#34;&gt;
Рис. - Пример геометрической интерпретации множества \(R\) (действительных чисел).&lt;/p&gt;
&lt;p&gt;Каждому действительному числу соответствует определенная точка числовой прямой,
и наооборот - каждой точке числовой прямой соответсвует действительное число.&lt;/p&gt;
&lt;h3 id=&#34;числовая-прямая--ось&#34;&gt;Числовая прямая (ось)&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;https://inomoz.com/ox-hugo/20220129-122432_screenshot.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Числовая ось обозначается буквами \(OX\), где \(O\) это 0 (совмещено с нулем). Точка \(O\) называется
&lt;strong&gt;началом координат&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Здесь \(x\) принадлежит множеству действительных чисел (\(x\) - действительное число).
\(x \in R\); \(x\in ( -\infty; +\infty )\)&lt;/p&gt;
&lt;p&gt;Числовую прямую такаже обозначают &lt;strong&gt;бесконечным интервалом&lt;/strong&gt; \(-\infty; +\infty\).&lt;/p&gt;
&lt;h3 id=&#34;числовые-промежутки&#34;&gt;Числовые промежутки&lt;/h3&gt;
&lt;p&gt;&lt;a id=&#34;org649230e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Числовые промежутки - множество чисел соответствуещее числовому промежутку (интервалу).
Виды числовых промежутков:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://inomoz.com/ox-hugo/20220129-104230_screenshot.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Круглая скобка означает что крайнее значение не входит в промежуток, а квадратная что входит.
Соответсвенно так-же обозначаются на графике в виде выколотых или закрашеных точках.&lt;/p&gt;
&lt;h3 id=&#34;модуль-числа&#34;&gt;Модуль числа&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Модуль&lt;/strong&gt; или &lt;strong&gt;абслютное значение&lt;/strong&gt; числа - это его расстояние от начала координат.
Так как расстояние не может быть отрицательным, то модуль любого числа \(\geq0\).
Модуль &amp;ldquo;уничтожает&amp;rdquo; возможный знак &amp;ldquo;минуса&amp;rdquo;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://inomoz.com/ox-hugo/20220129-105000_screenshot.png&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;\(|-4| = 4\), \(|0| = 0\), \(|2| = 2\)&lt;/p&gt;
&lt;p&gt;Числа, равные по модулю (напрмер, \(4\) и \(-4\)) называются &lt;strong&gt;противоположными&lt;/strong&gt;, так-как они равноудалены от начала координат (от нуля).&lt;/p&gt;
&lt;p&gt;Расстояние между двумя числами равно модулю их разности, например, получается что расстояние можно измерить с любого числа:
\(5 - 3 = |5-3| = |2| = 2\), \(3 - 5 = |3 - 5| = |-2| = 2\)&lt;/p&gt;
&lt;h3 id=&#34;буквы&#34;&gt;Буквы&lt;/h3&gt;
&lt;p&gt;Буквы - &lt;strong&gt;переменные велечины&lt;/strong&gt;, используются для записи формул, функция и математических фактов в общем виде.&lt;/p&gt;
&lt;p&gt;При помощи букв можно определять &lt;a href=&#34;#org649230e&#34;&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Интервал \((a;b)\), здесь \(a\) и \(b\) - произвольные действительные числа. При этом \(a &amp;lt; b\).
Полуинтервалы \([a;b)\), \((a;b]\) - произвольные действительные числа. При этом \(a &amp;lt; b\).
Отрезок \([a;b]\) - тут уже допустимо строгое неравенство \(a \leq b\). При этом если \(a = b\), то отрезок вырождается в точку и имеет нулевую длину.&lt;/p&gt;
&lt;h3 id=&#34;формулы&#34;&gt;Формулы&lt;/h3&gt;
&lt;h2 id=&#34;база&#34;&gt;База&lt;/h2&gt;
&lt;h3 id=&#34;элементарные-действия&#34;&gt;Элементарные действия&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqrt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; fractions &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fraction

print(Fraction(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
print(sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;))
print(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
print(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
print(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;числа-dot-кратко-о-главном-dot&#34;&gt;Числа. Кратко о главном.&lt;/h3&gt;
&lt;h2 id=&#34;база&#34;&gt;База&lt;/h2&gt;
&lt;h3 id=&#34;элементарные-действия&#34;&gt;Элементарные действия&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqrt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; fractions &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fraction

print(Fraction(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
print(sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;))
print(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
print(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
print(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;правила-раскрытия-скобок&#34;&gt;Правила раскрытия скобок&lt;/h3&gt;
&lt;h3 id=&#34;числа-dot-кратко-о-главном-dot&#34;&gt;Числа. Кратко о главном.&lt;/h3&gt;
&lt;p&gt;Цифры - это числовые символы при помощи который записываются &lt;strong&gt;числа&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Исторически первыми числами были натуральные числа, для подсчета людей, кур, овец, монет и т.д.&lt;/p&gt;
&lt;p&gt;Для краткости множесто натуральных чисел \({1,2,3,4,5,6,7,8,9,10,11,12,&amp;hellip;}\) обозначают буквой \(N\).&lt;/p&gt;
&lt;p&gt;Римский вариант натуральных чисел \({I,II,III,IV,V,VI,VII,VIII,IXX}\)&lt;/p&gt;
&lt;p&gt;Иногда к множеству натуральных чисел относят ноль: \(0 \in N\)&lt;/p&gt;
&lt;p&gt;Элементы произвольного множества принято записывать в &lt;code&gt;{}&lt;/code&gt; фигурных скобках.&lt;/p&gt;
&lt;p&gt;Если множество не содержит элементов, то его называют пустым и обозначают символом \(\varnothing\).&lt;/p&gt;
&lt;p&gt;Babel example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
fig&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
fig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tight_layout()

fname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;images/myfig.svg&amp;#39;&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savefig(fname)
fname &lt;span style=&#34;color:#75715e&#34;&gt;# return this to org-mode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Свет и освещение</title>
      <link>https://inomoz.com/posts/davidsvetosveshchenie2001/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://inomoz.com/posts/davidsvetosveshchenie2001/</guid>
      <description>&lt;h2 id=&#34;davidSvetOsveshchenie2001&#34;&gt;Свет и освещение&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
